{
  "swagger" : "2.0",
  "info" : {
    "version" : "1.0.0",
    "title" : "Datapunt OpenID Connect service",
    "termsOfService" : "TODO",
    "contact" : {
      "name" : "Datapunt Amsterdam",
      "url" : "https://datapunt.amsterdam.nl/",
      "email" : "datapunt.ois@amsterdam.nl"
    }
  },
  "host" : "api.data.amsterdam.nl",
  "basePath" : "/oauth2",
  "schemes" : [ "https" ],
  "paths" : {
    "/authorization_code_grant" : {
      "get" : {
        "summary" : "Authorization Code Grant endpoint",
        "description" : "[4.1.1.  Authorization Request](https://tools.ietf.org/html/rfc6749#section-4.1.1)\n\nThe client constructs the request URI by adding the following\nparameters to the query component of the authorization endpoint URI\nusing the `application/x-www-form-urlencoded` format [...]\n",
        "parameters" : [ {
          "name" : "response_type",
          "in" : "query",
          "description" : "Must be `code`",
          "required" : true,
          "type" : "string",
          "enum" : [ "code" ]
        }, {
          "name" : "client_id",
          "in" : "query",
          "description" : "[2.2.  Client Identifier](https://tools.ietf.org/html/rfc6749#section-2.2)\n\nThe authorization server issues the registered client a client\nidentifier — a unique string representing the registration\ninformation provided by the client.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "redirect_uri",
          "in" : "query",
          "description" : "[3.1.2.  Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2)\n\nAfter completing its interaction with the resource owner, the\nauthorization server […] redirects the user-agent to the\nclient's redirection endpoint previously established with the\nauthorization server during the client registration process or when\nmaking the authorization request.\n",
          "required" : false,
          "type" : "string",
          "format" : "uri"
        }, {
          "name" : "scope",
          "in" : "query",
          "description" : "[3.3.  Access Token Scope](https://tools.ietf.org/html/rfc6749#section-3.3)\n\nThe authorization and token endpoints allow the client to specify the\nscope of the access request using the `scope` request parameter.  In\nturn, the authorization server uses the `scope` response parameter to\ninform the client of the scope of the access token issued.\n\nThe value of the scope parameter is expressed as a list of space-\ndelimited, case-sensitive strings.\n",
          "required" : false,
          "type" : "string",
          "pattern" : "^[\\x21\\x23-\\x5a\\x5e-\\x7e\\[\\]]+(?: [\\x21\\x23-\\x5a\\x5e-\\x7e\\[\\]]+)*$"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "RECOMMENDED.  An opaque value used by the client to maintain\nstate between the request and callback.  The authorization\nserver includes this value when redirecting the user-agent back\nto the client.  The parameter SHOULD be used for preventing\ncross-site request forgery as described in\n[Section 10.12.](https://tools.ietf.org/html/rfc6749#section-10.12)\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "302" : {
            "description" : "If the resource owner denies the access request or if the request\nfails for reasons other than a missing or invalid redirection URI,\nthe authorization server informs the client by adding the following\nparameters to the fragment component of the redirection URI using the\n`application/x-www-form-urlencoded` format […]\n\n- `error`\n\n  REQUIRED.  A single ASCII error code from the following:\n\n  - `invalid_request`\n\n    The request is missing a required parameter, includes an\n    invalid parameter value, includes a parameter more than\n    once, or is otherwise malformed.\n\n  - `unauthorized_client`\n\n    The client is not authorized to request an access token\n    using this method.\n\n  - `access_denied`\n\n    The resource owner or authorization server denied the\n    request.\n\n  - `unsupported_response_type`\n\n    The authorization server does not support obtaining an\n    access token using this method.\n\n  - `invalid_scope`\n\n    The requested scope is invalid, unknown, or malformed.\n\n  - `server_error`\n\n    The authorization server encountered an unexpected\n    condition that prevented it from fulfilling the request.\n    (This error code is needed because a 500 Internal Server\n    Error HTTP status code cannot be returned to the client\n    via an HTTP redirect.)\n\n  - `temporarily_unavailable`\n\n    The authorization server is currently unable to handle\n    the request due to a temporary overloading or maintenance\n    of the server.  (This error code is needed because a 503\n    Service Unavailable HTTP status code cannot be returned\n    to the client via an HTTP redirect.)\n\n  Values for the `error` parameter MUST NOT include characters\n  outside the set `%x20-21 / %x23-5B / %x5D-7E`.\n\n- `error_description`\n\n  OPTIONAL.  Human-readable ASCII text providing\n  additional information, used to assist the client developer in\n  understanding the error that occurred.\n  Values for the `error_description` parameter MUST NOT include\n  characters outside the set `%x20-21 / %x23-5B / %x5D-7E`.\n\n- `error_uri`\n\n  OPTIONAL.  A URI identifying a human-readable web page with\n  information about the error, used to provide the client\n  developer with additional information about the error.\n  Values for the `error_uri` parameter MUST conform to the\n  URI-reference syntax and thus MUST NOT include characters\n  outside the set `%x21 / %x23-5B / %x5D-7E`.\n\n- `state`\n\n  REQUIRED if a `state` parameter was present in the client\n  authorization request.  The exact value received from the\n  client.\n"
          },
          "303" : {
            "description" : "If the resource owner grants the access request, the authorization\nserver issues an authorization code and delivers it to the client by\nadding the following parameters to the query component of the\nredirection URI using the `application/x-www-form-urlencoded` format.\n\n- `code`\n\n  REQUIRED.  The authorization code generated by the\n  authorization server.  The authorization code MUST expire\n  shortly after it is issued to mitigate the risk of leaks.  A\n  maximum authorization code lifetime of 10 minutes is\n  RECOMMENDED.  The client MUST NOT use the authorization code\n  more than once.  If an authorization code is used more than\n  once, the authorization server MUST deny the request and SHOULD\n  revoke (when possible) all tokens previously issued based on\n  that authorization code.  The authorization code is bound to\n  the client identifier and redirection URI.\n\n- `state`\n\n  REQUIRED if the \"state\" parameter was present in the client\n  authorization request.  The exact value received from the\n  client.\n"
          },
          "default" : {
            "description" : "TODO. Many things can happen in response to a `GET` request,\nprobably involving one or more redirects.\n"
          }
        }
      }
    },
    "/token" : {
      "post" : {
        "summary" : "Access Token Request",
        "description" : "[4.1.3.  Access Token Request](https://tools.ietf.org/html/rfc6749#section-4.1.3)\n\nThe client makes a request to the token endpoint by sending the\nfollowing parameters using the `application/x-www-form-urlencoded`\nformat per Appendix B with a character encoding of UTF-8 in the HTTP\nrequest entity-body:\n",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "grant_type",
          "in" : "formData",
          "description" : "Must be `authorization_code`\n",
          "required" : true,
          "type" : "string",
          "enum" : [ "authorization_code" ]
        }, {
          "name" : "code",
          "in" : "formData",
          "description" : "The authorization code received from the authorization server.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "redirect_uri",
          "in" : "formData",
          "description" : "REQUIRED, if the `redirect_uri` parameter was included in the\nauthorization request, and their values MUST be identical.\n",
          "required" : false,
          "type" : "string",
          "format" : "uri"
        }, {
          "name" : "client_id",
          "in" : "formData",
          "description" : "REQUIRED, if the client is not authenticating with the\nauthorization server.\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "[5.1.  Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1)\n\nThe authorization server issues an access token and optional refresh\ntoken, and constructs the response by adding the following parameters\nto the entity-body of the HTTP response with a `200` (OK) status code.\n\nThe parameters are included in the entity-body of the HTTP response\nusing the `application/json` media type as defined by [RFC4627].  The\nparameters are serialized into a JavaScript Object Notation (JSON)\nstructure by adding each parameter at the highest structure level.\nParameter names and string values are included as JSON strings.\nNumerical values are included as JSON numbers.  The order of\nparameters does not matter and can vary.\n\nThe authorization server MUST include the HTTP `Cache-Control`\nresponse header field [RFC2616] with a value of `no-store` in any\nresponse containing tokens, credentials, or other sensitive\ninformation, as well as the `Pragma` response header field [RFC2616]\nwith a value of `no-cache`.\n\nThe client MUST ignore unrecognized value names in the response.  The\nsizes of tokens and other values received from the authorization\nserver are left undefined.  The client should avoid making\nassumptions about value sizes.  The authorization server SHOULD\ndocument the size of any value it issues.\n",
            "schema" : {
              "$ref" : "#/definitions/inline_response_200"
            },
            "headers" : {
              "Cache-Control" : {
                "type" : "string",
                "description" : "See section [5.4. Pragma](https://tools.ietf.org/html/rfc7234#section-5.4)\nin RFC7234.\n",
                "enum" : [ "no-store" ]
              },
              "Pragma" : {
                "type" : "string",
                "description" : "See section [5.2. Cache-Control](https://tools.ietf.org/html/rfc7234#section-5.2)\nin RFC7234.\n",
                "enum" : [ "no-cache" ]
              }
            }
          },
          "400" : {
            "description" : "[5.2.  Error Response](https://tools.ietf.org/html/rfc6749#section-5.2)\n\nThe authorization server responds with an HTTP 400 (Bad Request)\nstatus code (unless specified otherwise)\n\nThe parameters are included in the entity-body of the HTTP response\nusing the `application/json` media type as defined by [RFC4627].  The\nparameters are serialized into a JSON structure by adding each\nparameter at the highest structure level.  Parameter names and string\nvalues are included as JSON strings.  Numerical values are included\nas JSON numbers.  The order of parameters does not matter and can\nvary.\n",
            "schema" : {
              "$ref" : "#/definitions/inline_response_400"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : { },
  "definitions" : {
    "inline_response_200" : {
      "required" : [ "access_token", "expires_in", "token_type" ],
      "properties" : {
        "access_token" : {
          "type" : "string",
          "format" : "base64",
          "description" : "An opaque token string.\n"
        },
        "token_type" : {
          "type" : "string",
          "description" : "In this version of the API, this will always be `Bearer`.\nCase insensitive.\n",
          "enum" : [ "Bearer" ]
        },
        "expires_in" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The lifetime in seconds of the access token.  For\nexample, the value \"3600\" denotes that the access token will\nexpire in one hour from the time the response was generated.\nIf omitted, the authorization server SHOULD provide the\nexpiration time via other means or document the default value.\n"
        },
        "refresh_token" : {
          "type" : "string",
          "format" : "base64",
          "description" : "An opaque token string.\n"
        },
        "scope" : {
          "type" : "string",
          "description" : "OPTIONAL, if identical to the scope requested by the client;\notherwise, REQUIRED.  The scope of the access token as\ndescribed by [Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3).\n",
          "pattern" : "^[\\x21\\x23-\\x5a\\x5e-\\x7e\\[\\]]+(?: [\\x21\\x23-\\x5a\\x5e-\\x7e\\[\\]]+)*$"
        }
      }
    },
    "inline_response_400" : {
      "properties" : {
        "error" : {
          "type" : "string",
          "description" : "REQUIRED.  A single ASCII error code from the following:\n\n-   invalid_request\n\n    The request is missing a required parameter, includes an\n    unsupported parameter value (other than grant type),\n    repeats a parameter, includes multiple credentials,\n    utilizes more than one mechanism for authenticating the\n    client, or is otherwise malformed.\n\n-   invalid_client\n\n    Client authentication failed (e.g., unknown client, no\n    client authentication included, or unsupported\n    authentication method).  The authorization server MAY\n    return an HTTP 401 (Unauthorized) status code to indicate\n    which HTTP authentication schemes are supported.  If the\n    client attempted to authenticate via the \"Authorization\"\n    request header field, the authorization server MUST\n    respond with an HTTP 401 (Unauthorized) status code and\n    include the \"WWW-Authenticate\" response header field\n    matching the authentication scheme used by the client.\n\n-   invalid_grant\n\n    The provided authorization grant (e.g., authorization\n    code, resource owner credentials) or refresh token is\n    invalid, expired, revoked, does not match the redirection\n    URI used in the authorization request, or was issued to\n    another client.\n\n-   unauthorized_client\n\n    The authenticated client is not authorized to use this\n    authorization grant type.\n\n-   unsupported_grant_type\n\n    The authorization grant type is not supported by the\n    authorization server.\n\n-   invalid_scope\n\n    The requested scope is invalid, unknown, malformed, or\n    exceeds the scope granted by the resource owner.\n",
          "enum" : [ "invalid_request", "invalid_client", "invalid_grant", "unauthorized_client", "unsupported_grant_type", "invalid_scope" ]
        },
        "error_description" : {
          "type" : "string",
          "description" : "OPTIONAL.  Human-readable ASCII text providing\nadditional information, used to assist the client developer in\nunderstanding the error that occurred.\nValues for the \"error_description\" parameter MUST NOT include\ncharacters outside the set %x20-21 / %x23-5B / %x5D-7E.\n"
        },
        "error_uri" : {
          "type" : "string",
          "format" : "uri",
          "description" : "OPTIONAL.  A URI identifying a human-readable web page with\ninformation about the error, used to provide the client\ndeveloper with additional information about the error.\nValues for the `error_uri` parameter MUST conform to the\nURI-reference syntax and thus MUST NOT include characters\noutside the set `%x21 / %x23-5B / %x5D-7E`.\n"
        }
      }
    }
  },
  "parameters" : {
    "code_formData" : {
      "name" : "code",
      "in" : "formData",
      "description" : "The authorization code received from the authorization server.\n",
      "required" : true,
      "type" : "string"
    },
    "client_id_formData" : {
      "name" : "client_id",
      "in" : "formData",
      "description" : "REQUIRED, if the client is not authenticating with the\nauthorization server.\n",
      "required" : false,
      "type" : "string"
    },
    "client_id_query" : {
      "name" : "client_id",
      "in" : "query",
      "description" : "[2.2.  Client Identifier](https://tools.ietf.org/html/rfc6749#section-2.2)\n\nThe authorization server issues the registered client a client\nidentifier — a unique string representing the registration\ninformation provided by the client.\n",
      "required" : true,
      "type" : "string"
    },
    "grant_type_formData" : {
      "name" : "grant_type",
      "in" : "formData",
      "description" : "Must be `authorization_code`\n",
      "required" : true,
      "type" : "string",
      "enum" : [ "authorization_code" ]
    },
    "redirect_uri_formData" : {
      "name" : "redirect_uri",
      "in" : "formData",
      "description" : "REQUIRED, if the `redirect_uri` parameter was included in the\nauthorization request, and their values MUST be identical.\n",
      "required" : false,
      "type" : "string",
      "format" : "uri"
    },
    "redirect_uri_query" : {
      "name" : "redirect_uri",
      "in" : "query",
      "description" : "[3.1.2.  Redirection Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1.2)\n\nAfter completing its interaction with the resource owner, the\nauthorization server […] redirects the user-agent to the\nclient's redirection endpoint previously established with the\nauthorization server during the client registration process or when\nmaking the authorization request.\n",
      "required" : false,
      "type" : "string",
      "format" : "uri"
    },
    "response_type_query" : {
      "name" : "response_type",
      "in" : "query",
      "description" : "Must be `code`",
      "required" : true,
      "type" : "string",
      "enum" : [ "code" ]
    },
    "scope_query" : {
      "name" : "scope",
      "in" : "query",
      "description" : "[3.3.  Access Token Scope](https://tools.ietf.org/html/rfc6749#section-3.3)\n\nThe authorization and token endpoints allow the client to specify the\nscope of the access request using the `scope` request parameter.  In\nturn, the authorization server uses the `scope` response parameter to\ninform the client of the scope of the access token issued.\n\nThe value of the scope parameter is expressed as a list of space-\ndelimited, case-sensitive strings.\n",
      "required" : false,
      "type" : "string",
      "pattern" : "^[\\x21\\x23-\\x5a\\x5e-\\x7e\\[\\]]+(?: [\\x21\\x23-\\x5a\\x5e-\\x7e\\[\\]]+)*$"
    },
    "state_query" : {
      "name" : "state",
      "in" : "query",
      "description" : "RECOMMENDED.  An opaque value used by the client to maintain\nstate between the request and callback.  The authorization\nserver includes this value when redirecting the user-agent back\nto the client.  The parameter SHOULD be used for preventing\ncross-site request forgery as described in\n[Section 10.12.](https://tools.ietf.org/html/rfc6749#section-10.12)\n",
      "required" : false,
      "type" : "string"
    }
  },
  "responses" : {
    "access_token_success" : {
      "description" : "[5.1.  Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1)\n\nThe authorization server issues an access token and optional refresh\ntoken, and constructs the response by adding the following parameters\nto the entity-body of the HTTP response with a `200` (OK) status code.\n\nThe parameters are included in the entity-body of the HTTP response\nusing the `application/json` media type as defined by [RFC4627].  The\nparameters are serialized into a JavaScript Object Notation (JSON)\nstructure by adding each parameter at the highest structure level.\nParameter names and string values are included as JSON strings.\nNumerical values are included as JSON numbers.  The order of\nparameters does not matter and can vary.\n\nThe authorization server MUST include the HTTP `Cache-Control`\nresponse header field [RFC2616] with a value of `no-store` in any\nresponse containing tokens, credentials, or other sensitive\ninformation, as well as the `Pragma` response header field [RFC2616]\nwith a value of `no-cache`.\n\nThe client MUST ignore unrecognized value names in the response.  The\nsizes of tokens and other values received from the authorization\nserver are left undefined.  The client should avoid making\nassumptions about value sizes.  The authorization server SHOULD\ndocument the size of any value it issues.\n",
      "schema" : {
        "$ref" : "#/definitions/inline_response_200"
      },
      "headers" : {
        "Cache-Control" : {
          "type" : "string",
          "description" : "See section [5.4. Pragma](https://tools.ietf.org/html/rfc7234#section-5.4)\nin RFC7234.\n",
          "enum" : [ "no-store" ]
        },
        "Pragma" : {
          "type" : "string",
          "description" : "See section [5.2. Cache-Control](https://tools.ietf.org/html/rfc7234#section-5.2)\nin RFC7234.\n",
          "enum" : [ "no-cache" ]
        }
      }
    },
    "access_token_error" : {
      "description" : "[5.2.  Error Response](https://tools.ietf.org/html/rfc6749#section-5.2)\n\nThe authorization server responds with an HTTP 400 (Bad Request)\nstatus code (unless specified otherwise)\n\nThe parameters are included in the entity-body of the HTTP response\nusing the `application/json` media type as defined by [RFC4627].  The\nparameters are serialized into a JSON structure by adding each\nparameter at the highest structure level.  Parameter names and string\nvalues are included as JSON strings.  Numerical values are included\nas JSON numbers.  The order of parameters does not matter and can\nvary.\n",
      "schema" : {
        "$ref" : "#/definitions/inline_response_400"
      }
    }
  },
  "x-description" : "[4.1.  Authorization Code Grant](https://tools.ietf.org/html/rfc6749#section-4.1)\n\nThe authorization code grant type is used to obtain both access\ntokens and refresh tokens and is optimized for confidential clients.\nSince this is a redirection-based flow, the client must be capable of\ninteracting with the resource owner's user-agent (typically a web\nbrowser) and capable of receiving incoming requests (via redirection)\nfrom the authorization server.\n\n    +----------+\n    | Resource |\n    |   Owner  |\n    |          |\n    +----------+\n         ^\n         |\n        (B)\n    +----|-----+          Client Identifier      +---------------+\n    |         -+----(A)-- & Redirection URI ---->|               |\n    |  User-   |                                 | Authorization |\n    |  Agent  -+----(B)-- User authenticates --->|     Server    |\n    |          |                                 |               |\n    |         -+----(C)-- Authorization Code ---<|               |\n    +-|----|---+                                 +---------------+\n      |    |                                         ^      v\n     (A)  (C)                                        |      |\n      |    |                                         |      |\n      ^    v                                         |      |\n    +---------+                                      |      |\n    |         |>---(D)-- Authorization Code ---------'      |\n    |  Client |          & Redirection URI                  |\n    |         |                                             |\n    |         |<---(E)----- Access Token -------------------'\n    +---------+       (w/ Optional Refresh Token)\n\nNote: The lines illustrating steps (A), (B), and (C) are broken into\ntwo parts as they pass through the user-agent.\n\n                 Figure 3: Authorization Code Flow\n\nThe flow illustrated in Figure 3 includes the following steps:\n\nA.  The client initiates the flow by directing the resource owner's\n    user-agent to the authorization endpoint.  The client includes\n    its client identifier, requested scope, local state, and a\n    redirection URI to which the authorization server will send the\n    user-agent back once access is granted (or denied).\n\nB.  The authorization server authenticates the resource owner (via\n    the user-agent) and establishes whether the resource owner\n    grants or denies the client's access request.\n\nC.  Assuming the resource owner grants access, the authorization\n    server redirects the user-agent back to the client using the\n    redirection URI provided earlier (in the request or during\n    client registration).  The redirection URI includes an\n    authorization code and any local state provided by the client\n    earlier.\n\nD.  The client requests an access token from the authorization\n    server's token endpoint by including the authorization code\n    received in the previous step.  When making the request, the\n    client authenticates with the authorization server.  The client\n    includes the redirection URI used to obtain the authorization\n    code for verification.\n\nE.  The authorization server authenticates the client, validates the\n    authorization code, and ensures that the redirection URI\n    received matches the URI used to redirect the client in\n    step (C).  If valid, the authorization server responds back with\n    an access token and, optionally, a refresh token.\n"
}