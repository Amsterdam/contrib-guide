{
    "docs": [
        {
            "location": "/",
            "text": "Introduction\n\n\nThis guide covers everything you need to succesfully start contributing to \n\nDatapunt\n. It formalizes coding styles, procedures, and all other things we\nagree (to disagree) upon.\n\n\n\n\nReferring to this guide\n\n\nPlease refer to this document whenever applicable, eg. while performing\n\ncode reviews\n and \nacceptance tests\n. If there are differing opinions\nabout which direction to take or style to use, you can refer to a section\nin this document. For example, a comment might look like:\n\n\n\n\nThere is a missing docstring. We agreed that all new\nclasses will contain at least a one liner. See section\n\ndocstrings\n\nin the style guide.\n\n\n\n\nThe canonical URL of this documentation is\n\nhttps://datapuntamsterdam.github.io/contrib-guide/\n\n\nContributing to this guide\n\n\nWhat to add?\n\n\nFor this contrib guide to stay useful it needs to be reasonably complete,\neasy to navigate and concise. So we don't need to mention obvious things.\n\n\nTry to include examples, an explaination of why, and screenshots if it helps.\n\n\nIf there is an open question the team must decide on, consider adding a todo:\n\n\n\n\nTODO: decide upon the color of our uniforms\n\n\n\n\nGetting started locally\n\n\ngit clone ssh://git@github.com:DatapuntAmsterdam/contrib-guide.git\ncd contrib-guide\npip install virtualenv\nvirtualenv .\n./bin/pip install -r requirements.txt\nmake docserver\n\n\n\n\nThis starts an HTTP-server on \nport 8000\n. All changes\nyou make in the \ndocs\n directory are visible there immediately.\n\n\nTo update dependencies:\n\n\nPlease don\u2019t pollute \nrequirements.txt\n by running\n\npip freeze >requirements.txt\n. Instead, only add/list top-level dependencies:\n\n\necho some_package >>requirements.txt\n./bin/pip install -r requirements.txt\n\n\n\n\nTo make a change\n\n\n\n\nCreate a branch\n\n\nEdit the docs locally\n\n\nCommit and push the branch\n\n\nCreate a pull request\n\n\nAfter review, merge the branch into master\n\n\n\n\nSee Also\n\n\n\n\nMkDocs documentation\n\n\nMarkdown Syntax\n according to:\n\n\nDaring Fireball\n\n\nStack Overflow",
            "title": "Introduction"
        },
        {
            "location": "/#introduction",
            "text": "This guide covers everything you need to succesfully start contributing to  Datapunt . It formalizes coding styles, procedures, and all other things we\nagree (to disagree) upon.",
            "title": "Introduction"
        },
        {
            "location": "/#referring-to-this-guide",
            "text": "Please refer to this document whenever applicable, eg. while performing code reviews  and  acceptance tests . If there are differing opinions\nabout which direction to take or style to use, you can refer to a section\nin this document. For example, a comment might look like:   There is a missing docstring. We agreed that all new\nclasses will contain at least a one liner. See section docstrings \nin the style guide.   The canonical URL of this documentation is https://datapuntamsterdam.github.io/contrib-guide/",
            "title": "Referring to this guide"
        },
        {
            "location": "/#contributing-to-this-guide",
            "text": "",
            "title": "Contributing to this guide"
        },
        {
            "location": "/#what-to-add",
            "text": "For this contrib guide to stay useful it needs to be reasonably complete,\neasy to navigate and concise. So we don't need to mention obvious things.  Try to include examples, an explaination of why, and screenshots if it helps.  If there is an open question the team must decide on, consider adding a todo:   TODO: decide upon the color of our uniforms",
            "title": "What to add?"
        },
        {
            "location": "/#getting-started-locally",
            "text": "git clone ssh://git@github.com:DatapuntAmsterdam/contrib-guide.git\ncd contrib-guide\npip install virtualenv\nvirtualenv .\n./bin/pip install -r requirements.txt\nmake docserver  This starts an HTTP-server on  port 8000 . All changes\nyou make in the  docs  directory are visible there immediately.",
            "title": "Getting started locally"
        },
        {
            "location": "/#to-update-dependencies",
            "text": "Please don\u2019t pollute  requirements.txt  by running pip freeze >requirements.txt . Instead, only add/list top-level dependencies:  echo some_package >>requirements.txt\n./bin/pip install -r requirements.txt",
            "title": "To update dependencies:"
        },
        {
            "location": "/#to-make-a-change",
            "text": "Create a branch  Edit the docs locally  Commit and push the branch  Create a pull request  After review, merge the branch into master",
            "title": "To make a change"
        },
        {
            "location": "/#see-also",
            "text": "MkDocs documentation  Markdown Syntax  according to:  Daring Fireball  Stack Overflow",
            "title": "See Also"
        },
        {
            "location": "/coding/",
            "text": "Common coding guidelines\n\n\n\n\nThe subgenius brains of your collegues should be able to easily comprehend\n    your code.\n\n\nYour code should be readable after a sleepless crazy wild night.\n\n\nMost developer time is lost chasing bugs.\n\n\nDebugging existing code is harder than writing new code. That brilliant,\n    super-dense code that took all your genius to write? You won't be able to\n    debug it.\n\n\n\n\nThe goal is to avoid BUG. Writing code to avoid bug will ALSO lead to code \nthat is easily readable and easy to follow, easy to comprehend \nand therefore does not contain bugs. \n\n\nHow to avoid bugs? Learn about the limits of the average brain, the\nmost important computer.\nThe following rules of thumb should be followed to avoid bugs and have \nhappy collegues and easy to maintain code.\n\n\n\n\nfunctions should not contain more then 7 variables.\n\n\nfunctions can NOT not be longer then 25 Lines Of Code (LOC).\n\n\nfunctions should be around \nmax ~10-15\n lines.\n\n\nDO NOT USE abbreviations\n. abbreviations make you think. losing precious \n  brain cycles.\n\n\nautocomplete your long and \nreadable_variable_names\n. do nog use \nrd_vr_name\n.\n\n\nfunctions should do \n1 thing\n\n\nWrite a docstring\n for every function. if you use AND ... AND split the \n  function up.\n\n\n\n\nLine Length\n\n\nPrefer lines under 80 characters. the absolute exception Even longer lines should be marked as errors\nby a linter tool. Keep in mind that humans are better at reading narrow columns\nof text and some developers like to have two windows open side-by-side.\n\n\nLayout\n\n\n\n\nuse 4-space indents\n\n\nkeep files under 1000 lines\n\n\ndelete any commented-out code without a clear meta-comment about why it's\n  good to keep it around\n\n\nidentation more the 3 deep should be avoided.\n\n\n\n\nArchitecture / Design\n\n\n\n\nSingle Responsibility Principle\n \u2014 a class/function should have one and\n  only one responsibility.\n\n\nThree strikes rule\n \u2014 if a small piece of code is copied once and it's\n  simpler, that's okay. Anything more and it should be factored out.\n\n\nCode left in a better state than found\n \u2014 we should continually be\n  reducing technical debt, so if you touch a piece of code, it should be nicer\n  than before.\n\n\n\n\nReviews\n\n\nWhat is the responsibility of the code reviewer?\n\n\n\n\nStyle\n \u2014 identify discrepancies from this guide\n\n\nPotential Bugs\n \u2014 try to think about what might break\n\n\nError Handling\n \u2014 if something external can cause an exception, how will\n  the user experience it?\n\n\nEfficiency\n \u2014 will things scale and still be responsive?\n\n\nReadability\n \u2014 can you understand what's going on?\n\n\nRequirements\n \u2014 does the commit fulfill the requirements of the ticket\n\n\nDoes the code do what is should do\n -- run the code and see if it does not do weird things like downloading the internet.\n\n\nCheck that code endpoints and parameters are sufficiently tested\n -- there should be minumum amount of health checks\n\n\nDebug mode / health checks\n -- Common security mistakes should be checked.\n\n\nDecide for yourself if you could maintain and bugfix the code you see",
            "title": "General"
        },
        {
            "location": "/coding/#common-coding-guidelines",
            "text": "The subgenius brains of your collegues should be able to easily comprehend\n    your code.  Your code should be readable after a sleepless crazy wild night.  Most developer time is lost chasing bugs.  Debugging existing code is harder than writing new code. That brilliant,\n    super-dense code that took all your genius to write? You won't be able to\n    debug it.   The goal is to avoid BUG. Writing code to avoid bug will ALSO lead to code \nthat is easily readable and easy to follow, easy to comprehend \nand therefore does not contain bugs.   How to avoid bugs? Learn about the limits of the average brain, the\nmost important computer.\nThe following rules of thumb should be followed to avoid bugs and have \nhappy collegues and easy to maintain code.   functions should not contain more then 7 variables.  functions can NOT not be longer then 25 Lines Of Code (LOC).  functions should be around  max ~10-15  lines.  DO NOT USE abbreviations . abbreviations make you think. losing precious \n  brain cycles.  autocomplete your long and  readable_variable_names . do nog use  rd_vr_name .  functions should do  1 thing  Write a docstring  for every function. if you use AND ... AND split the \n  function up.",
            "title": "Common coding guidelines"
        },
        {
            "location": "/coding/#line-length",
            "text": "Prefer lines under 80 characters. the absolute exception Even longer lines should be marked as errors\nby a linter tool. Keep in mind that humans are better at reading narrow columns\nof text and some developers like to have two windows open side-by-side.",
            "title": "Line Length"
        },
        {
            "location": "/coding/#layout",
            "text": "use 4-space indents  keep files under 1000 lines  delete any commented-out code without a clear meta-comment about why it's\n  good to keep it around  identation more the 3 deep should be avoided.",
            "title": "Layout"
        },
        {
            "location": "/coding/#architecture-design",
            "text": "Single Responsibility Principle  \u2014 a class/function should have one and\n  only one responsibility.  Three strikes rule  \u2014 if a small piece of code is copied once and it's\n  simpler, that's okay. Anything more and it should be factored out.  Code left in a better state than found  \u2014 we should continually be\n  reducing technical debt, so if you touch a piece of code, it should be nicer\n  than before.",
            "title": "Architecture / Design"
        },
        {
            "location": "/coding/#reviews",
            "text": "What is the responsibility of the code reviewer?   Style  \u2014 identify discrepancies from this guide  Potential Bugs  \u2014 try to think about what might break  Error Handling  \u2014 if something external can cause an exception, how will\n  the user experience it?  Efficiency  \u2014 will things scale and still be responsive?  Readability  \u2014 can you understand what's going on?  Requirements  \u2014 does the commit fulfill the requirements of the ticket  Does the code do what is should do  -- run the code and see if it does not do weird things like downloading the internet.  Check that code endpoints and parameters are sufficiently tested  -- there should be minumum amount of health checks  Debug mode / health checks  -- Common security mistakes should be checked.  Decide for yourself if you could maintain and bugfix the code you see",
            "title": "Reviews"
        },
        {
            "location": "/coding/projects/",
            "text": "Common project structure\n\n\nProjects are developed around datasets. Developers have large freedom to build their api \nand import procedures. Projects should never get really large. The should be a \nsmall \nservice\n which is replaceble in a couple\nof weeks and does not have dependencies on ohter projects.\n\n\n\n\ndeployement of a project should be standalone. if other services are down on broken.\n  your service / project should dpeloy just fine.\n\n\n\n\nTools\n\n\n\n\nGithub\n: source control\n\n\nJenkins\n: continuous deployment\n\n\n\n\nProject Template\n\n\nUp till now we use the nap_meetbouten project as an example foor the setup of new django projects\n\n\nProject behaviour\n\n\nevery project should get jumpstarted by doing a \ngit checkout\n followed by\n\n\ndocker-compose up\n\n\n\nDownload production data into your project docker database\n\n\ndocker-compose exec database update-db bag\n\n\n\nWill download the current production \nbag\n database in your project database\n\n\nChangelog (not used yet..)\n\n\nBefore each release, make sure \nchangelog.rst\n is updated. For each new feature\nand bugfix, include one short line. The purpose of the changelog is to give a\nquick overview, not to duplicate the git commit log.",
            "title": "Project structure"
        },
        {
            "location": "/coding/projects/#common-project-structure",
            "text": "Projects are developed around datasets. Developers have large freedom to build their api \nand import procedures. Projects should never get really large. The should be a \nsmall  service  which is replaceble in a couple\nof weeks and does not have dependencies on ohter projects.   deployement of a project should be standalone. if other services are down on broken.\n  your service / project should dpeloy just fine.",
            "title": "Common project structure"
        },
        {
            "location": "/coding/projects/#tools",
            "text": "Github : source control  Jenkins : continuous deployment",
            "title": "Tools"
        },
        {
            "location": "/coding/projects/#project-template",
            "text": "Up till now we use the nap_meetbouten project as an example foor the setup of new django projects",
            "title": "Project Template"
        },
        {
            "location": "/coding/projects/#project-behaviour",
            "text": "every project should get jumpstarted by doing a  git checkout  followed by  docker-compose up",
            "title": "Project behaviour"
        },
        {
            "location": "/coding/projects/#download-production-data-into-your-project-docker-database",
            "text": "docker-compose exec database update-db bag  Will download the current production  bag  database in your project database",
            "title": "Download production data into your project docker database"
        },
        {
            "location": "/coding/projects/#changelog-not-used-yet",
            "text": "Before each release, make sure  changelog.rst  is updated. For each new feature\nand bugfix, include one short line. The purpose of the changelog is to give a\nquick overview, not to duplicate the git commit log.",
            "title": "Changelog (not used yet..)"
        },
        {
            "location": "/coding/python/",
            "text": "Python coding guidelines\n\n\nIn general we try to follow the common community guidelines,\nincluding PEP-8 and PEP-257. But these don't cover everything\nimportant and we make a few exceptions.\n\n\nflake8\n\n\nEvery commit should pass an automated flake8 check with the plugins \npep8\n,\n\nmccabe\n, and \npep8-naming\n and this configuration:\n\n\n# one section of flake.cfg\n\n[flake8]\n#ignore=E501,E225,E261,W391,E241,E203,W292,W391\n\nexclude=.git,migrations,docs,scripts\nmax-complexity=8\nmax-line-length = 119\nstatistics=True\njobs=1\n\n\n\n\nCommit hooks\n\n\nGit hooks are great for fast and light-weight tests. Here's how you can setup\nyour commit hooks for automated style checks. This assumes your project has a\nMakefile with a linter command named \ncheck\n:\n\n\n# .git/hooks/pre-commit\n\n#!/bin/sh\nmake check\n\n\n\nMake sure that your virtualenv containing flake8 is activated when committing.\nAlso note that this probably won't work form within Sourcetree, but it's better\nfor you to stay in the shell anyway.\n\n\nTODO: consider also using the \nflake8-pep257\n and \nflake8-print\n plugins to\nautomate more tests.\n\n\nDocumentation\n\n\nclass docstrings\n\n\nWhenever you create a class, add a docstring with at least a one-liner:\n\n\nclass SomeClass(object):\n    \"\"\"The one-line explaination\"\"\"\n    pass\n\n\n\n\nIf a longer description would be helpful, skip a line and use more sections\n(each is optional).  Don't provide useless information like \"the attribute\n\nname\n is the name of the object\":\n\n\nclass SomeClass(object):\n    \"\"\"Always start with a stand-alone one-liner\n\n    This class has no side-effects.\n\n    Attributes:\n        name: what end-users call this instance\n    \"\"\"\n    pass\n\n\n\n\nFunction docstrings\n\n\nSimilarly:\n\n\ndef simple_function(abc):\n    \"\"\"This function ignores the arguments and always returns None\"\"\"\n    pass\n\ndef complex_function(abc):\n    \"\"\"Always use a one-liner\n\n    Arguments:\n        abc: the letters of the alphabet\n    \"\"\"\n    pass\n\n\n\n\nBlank lines\n\n\nDon't include unnecessary blank lines around the docstrings.\n\n\nImports\n\n\nDo not use wildcard imports.\n\n\nImports don't have to be in alphabetical order. It is however more or less of a\nconvention that imports that are the furthest away from the current module in\nare the highest on top. So standard library imports like \nos\n, \nsystem\n etc. go\non top. Then come imports from installed packages; \ndjango\n, \ncelery\n etc. and\nfinally that belong to the current project.\n\n\nPrefer one line for one import\n\n\nLibraries\n\n\nBefore adding a new library, consider the long-term maintenance cost and risk\nof abandoned projects. It's often easier to copy code into our project or write\nit ourselves. If we can't use a stable and recent PyPi release, the threshold\nfor time-saved should be even higher.\n\n\nWe have agreed that the following Python libraries are definitely worth it:\n\n\n\n\nDjango\n\n\nDjango REST Framework\n\n\nFlask\n\n\nSwagger / OpenAPI\n\n\npsycopg2\n\n\nelasticsearch\n\n\nelasticsearch-dsl\n\n\n\n\nNaming\n\n\n\n\ndon't start method names with \nget_\n or \nset_\n. Use properties if possible.\n\n\n\n\nTesting\n\n\n\n\nnew behaviors should be accompanied by new tests\n\n\nif a behavior is changed and no tests break, that indicates\n  an important hole in our coverage.\n\n\ntests should work without internet access or a local database installed\n\n\n\n\nUse the following testing libraries:\n\n\n\n\nMock\n\n\npy.test",
            "title": "Python"
        },
        {
            "location": "/coding/python/#python-coding-guidelines",
            "text": "In general we try to follow the common community guidelines,\nincluding PEP-8 and PEP-257. But these don't cover everything\nimportant and we make a few exceptions.",
            "title": "Python coding guidelines"
        },
        {
            "location": "/coding/python/#flake8",
            "text": "Every commit should pass an automated flake8 check with the plugins  pep8 , mccabe , and  pep8-naming  and this configuration:  # one section of flake.cfg\n\n[flake8]\n#ignore=E501,E225,E261,W391,E241,E203,W292,W391\n\nexclude=.git,migrations,docs,scripts\nmax-complexity=8\nmax-line-length = 119\nstatistics=True\njobs=1",
            "title": "flake8"
        },
        {
            "location": "/coding/python/#commit-hooks",
            "text": "Git hooks are great for fast and light-weight tests. Here's how you can setup\nyour commit hooks for automated style checks. This assumes your project has a\nMakefile with a linter command named  check :  # .git/hooks/pre-commit\n\n#!/bin/sh\nmake check  Make sure that your virtualenv containing flake8 is activated when committing.\nAlso note that this probably won't work form within Sourcetree, but it's better\nfor you to stay in the shell anyway.  TODO: consider also using the  flake8-pep257  and  flake8-print  plugins to\nautomate more tests.",
            "title": "Commit hooks"
        },
        {
            "location": "/coding/python/#documentation",
            "text": "",
            "title": "Documentation"
        },
        {
            "location": "/coding/python/#class-docstrings",
            "text": "Whenever you create a class, add a docstring with at least a one-liner:  class SomeClass(object):\n    \"\"\"The one-line explaination\"\"\"\n    pass  If a longer description would be helpful, skip a line and use more sections\n(each is optional).  Don't provide useless information like \"the attribute name  is the name of the object\":  class SomeClass(object):\n    \"\"\"Always start with a stand-alone one-liner\n\n    This class has no side-effects.\n\n    Attributes:\n        name: what end-users call this instance\n    \"\"\"\n    pass",
            "title": "class docstrings"
        },
        {
            "location": "/coding/python/#function-docstrings",
            "text": "Similarly:  def simple_function(abc):\n    \"\"\"This function ignores the arguments and always returns None\"\"\"\n    pass\n\ndef complex_function(abc):\n    \"\"\"Always use a one-liner\n\n    Arguments:\n        abc: the letters of the alphabet\n    \"\"\"\n    pass",
            "title": "Function docstrings"
        },
        {
            "location": "/coding/python/#blank-lines",
            "text": "Don't include unnecessary blank lines around the docstrings.",
            "title": "Blank lines"
        },
        {
            "location": "/coding/python/#imports",
            "text": "Do not use wildcard imports.  Imports don't have to be in alphabetical order. It is however more or less of a\nconvention that imports that are the furthest away from the current module in\nare the highest on top. So standard library imports like  os ,  system  etc. go\non top. Then come imports from installed packages;  django ,  celery  etc. and\nfinally that belong to the current project.  Prefer one line for one import",
            "title": "Imports"
        },
        {
            "location": "/coding/python/#libraries",
            "text": "Before adding a new library, consider the long-term maintenance cost and risk\nof abandoned projects. It's often easier to copy code into our project or write\nit ourselves. If we can't use a stable and recent PyPi release, the threshold\nfor time-saved should be even higher.  We have agreed that the following Python libraries are definitely worth it:   Django  Django REST Framework  Flask  Swagger / OpenAPI  psycopg2  elasticsearch  elasticsearch-dsl",
            "title": "Libraries"
        },
        {
            "location": "/coding/python/#naming",
            "text": "don't start method names with  get_  or  set_ . Use properties if possible.",
            "title": "Naming"
        },
        {
            "location": "/coding/python/#testing",
            "text": "new behaviors should be accompanied by new tests  if a behavior is changed and no tests break, that indicates\n  an important hole in our coverage.  tests should work without internet access or a local database installed   Use the following testing libraries:   Mock  py.test",
            "title": "Testing"
        }
    ]
}